/*
대망의 node.js
node.js가 뭔가
자바스크립트를 써서 데이터베이스에 연결해 서버로 요청을 보내는 기능을 구현할 수 있다.
node.js는 크롬 v8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임이다.
node.js 를 웹서버 자체로 생각하는건 잘못된거임 아파치 같은 웹서버중 하나가 아니다.
자바스크립트로 브라우저가 아니라 서버에서 자바스크립트가 동작하도록 도와주는 런타임 플랫폼
이라고 생각하면 된다. 

2009년에 라이언 달 이라는 개발자가 node.js를 처음 만들었고 지금까지도 업데이트가 잘 돼고있음
node.js를 설치해서 실행한다고 웹서버가 실행되는게 아니라 node.js에 있는 라이브러리를 설치해서
npm(node package manager)줄임말임 즉 노드 패키지들을 관리하는 애들임
이것을 이용해서 라이브러리를 설치해서 사용할 수 있다.

노드의 장점은 라이브러리라 엄청 많아서 특이한게 아닌 이상은 다 만들 수 있다.
node.js 특 3개)

1. 자바스크립트로 백엔드 서버 로직을 개발할 수 있다.(장점)

2. 구글에서 개발한 js엔진을 쓰기 때문에 속도가 빨라영(인터프린터 방식)

3. 논 블로킹 방식 node.js의 모든 API는 비동기적으로 작동하며 호출 후 다른 API를 바로 불러올 수 있다.
한번 불러왔던 API를 요청하면 이벤트 루프가 확인해서 동작

메인 쓰레드라고 생각하면 됌 쓰레드는 나중에 알려줄겡

왜 node.js가 생겼냐면
방대한 오픈쏘스 생태계를 구축하기 위해서 
npm(node package manager)를 사용해서 패키지들을 다운받을 수 있고.
react express 및 코아 등등의 것들의 패키지들은 다 여기 npm에 등록되어있다.

특수한걸 만드는 사람이 아닌이상 거의 다 기능이 이미 나와있는것들이 많다.

잘쓰면 빠르고 좋은 효과를 볼 수 있다.

우리가 이제 module방식으로 작업할건데

모듈모듈거리는데

작은 클래스 즉 작은 작업들의 묶음이라고 생각하면 됌

package가 뭐냐면 클래스의 묶음이다.

그리고 그 package들의 묶음이 module이다.

기능들의 모임, 그리고 파일의 모임이라고 생각하면 됌

require이거를 좀 많이 쓸거임 중요한거임

node.js의 require가 무엇인가?

처음쓰니까 생소하니까 좀 어려운데

설치하고 쓰고 설치하고 쓰고 어려워

근데 설치할것들만 외우면 그렇게 별건 없습니다

처음에는 어렵습니당

겁먹지말고 합시당

우리 html에서는 script src=""이렇게 했었죠

근데 node는 좀 다릅니당

*/
//이거는 자바스크립트 내장 모듈이라서 그냥 사용가능합니당
//node.js에서 모듈을 가져오는 방법
//require(경로나 이름)
const http = require("http");

// http객체안의 createServer함수를 사용해서 서버를 만듬
// 이거를 다 변수에 담을게요
// 이거는 return 반환값이 있다는거죠?
const server = http.createServer((req,res)=>{
    // req 요청값
    // 404 500 이런 오류들 이게 웹페이지의 상대값이에요
    // 500이면 서버고 400이면 클라이언트
    // http에서 ok를 나타내는 번호가 200번이라서 
    req.statusCode = 200;//넌 요청에 성공했어라는 상대적 값이에요
    // http 상태 코드
    // 100번때 : 정보응답
    // 200번때 : 성공응답
    // 300번때 : 리다이렉션 메세지 우리가 요청한 URL에서 다음 URL로 변경이 됐을때 나옴
    // 400번때 : 클라이언트상의 오류
    // 500번때 : 서버 오류 응답, 서버에 오류가 있을때 
    // write 문자를 써서 보내주는 함수
    res.write('123');
    // end함수 끝맺음 안의 매개변수는 문자를 보내주면서 끝
    res.end('456');
    // 이안의 여러가지 더 많지만 서버가 들어갈 공간을 만들었어요
    // 포트가 열려있어야지 우리가 들어갈 수 있죠?
    // 그렇게 할려면 포트를 열어야겠죠
})


const PORT = 3000;

// 이 안에는 서버가 되는 server에 함수를 사용할건데
// 서버를 열어줌

server.listen(PORT,()=>{
    console.log("port : " ,PORT);
})
// server 객체의 준비가 되면 listen함수로 해당 포트에 서버를 대기시킨다.
// 서버를 대기시키는 이유는 클라이언트에서 요청이 오면 서버가 받아서 처리할 수 있다.
// 여기 들어가는 매개변수는 (포트번호,호스트의 이름,백로그,콜백함수)

// node.js 실행하는법
// node 자바스크립트 파일의 경로
// node.js 코딩을 해볼 수 있는곳 테스트용 코드들
// 코드 샌드박스도 있고 glitch 등등
// 노드 서버를 바로 볼 수 있고 코딩도 바로바로 테스트 해볼 수 있다.

// 웹서버를 만들 수 있는 구성이 완료된거에요

//server.js 들어가보면 많죠?

//그냥 이거 다 싹다 지우고 server.js 다 지운 다음에 우리가 썻던 코드를 그대로 복사해서
//붙여 넣어줘요

// glitch 장점
// http 검증도 되어있는 웹 서버를 테스트로 사용해 볼 수 있다.
// node프로젝트 생성버튼을 누르고
// server.js에 서버 로직을 작성한후 바로
// preview 버튼을 눌러서 위에 버튼을 바로 그 창에서 화면을 볼 수 있고.
// 테스트용 링크가 필요하면 preview버튼을 눌렀을때 preview in a new window의
// 버튼을 누르면 클라이언트 요청을 보내볼 웹서버 주소로 접속이 된다.
// 그래서 테스트에 용이하게 사용할 수 있다.

// node가 생각보다 버전관리가 중요함

// 서버와 node버전이 다르면 호환이 안돼는경우도 있기 때문에 버전관리를 해줘야함
// 최신버전은 기능이 있는데 구버전에 없을 경우에 기능이 실행되지 않아요.
// 이런 버전문제가 생겼을 경우 해결해주는 아이 물론 우리가 조작을 해줘야한다.
// 삭제했다 깔았다하면 쉬운데 귀찮으니까 여기서 실행해보는거임
// nvm(Node Version Manager)
// 윈도우에서는 안돼는데 tj/n()을 사용하면 편하대영
// nvm에 설치되어있는 버전 확인 명령어
// 윈도우에선 nvm install v15.10.0
// nvm 변경할 node 버전 설치 명령어
// nvm install v여기에 해당버전

// state오류가 발생하면 cmd를 관리자 권한을 실행해야 한다.

// npm install -g n 설치 명령어
// node -v
// nvm list available
// nvm install 17.3.0 (nvm install 원하는 버전)
// nvm list
// nvm use 17.3.0
// node -v

